import yts from 'yt-search';
import fetch from 'node-fetch';
import { prepareWAMessageMedia, generateWAMessageFromContent } from '@whiskeysockets/baileys';

const handler = async (m, { conn, args, usedPrefix, command }) => {
    if (!args[0]) return conn.reply(m.chat, `ü¶à‚ú® ùôÇùô™ùôßùôñ-ùôéùôùùôñùôñùôñ~ üåäüíô\n\n‚ö°Ô∏è ùôÑùô£ùôúùôßùôöùô®ùôñ ùô™ùô£ ùô©ùôöùô≠ùô©ùô§ ùô•ùôñùôßùôñ ùôóùô™ùô®ùôòùôñùôß ùôöùô£ ùôîùô§ùô™ùôèùô™ùôóùôö.\n> *Ejemplo:* ${usedPrefix + command} Shakira`, m);

    await m.react('üåÄ');
    try {
        let searchResults = await searchVideos(args.join(" "));

        if (!searchResults.length) throw new Error('üåä Ning√∫n resultado encontrado, Gura triste... üíîü¶à');

        let video = searchResults[0];
        let thumbnail = await (await fetch(video.miniatura)).buffer();

        let messageText = `‚îè‚îÅ‚îÅ‚îÅ‚îÅ„Äé ü¶àüíô ùôÇùôêùôçùòº ùôîùôäùôêùôèùôêùòΩùôÄ üåä „Äè‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n\n`;
        messageText += `üé∂ *T√≠tulo:* ${video.titulo}\n\n`;
        messageText += `> üïí ùòøùô™ùôßùôñùôòùôû√≥ùô£: ${video.duracion || 'No disponible'}\n`;
        messageText += `> üë§ ùòºùô™ùô©ùô§ùôß: ${video.canal || 'Desconocido'}\n`;
        messageText += `> üìÖ ùôãùô™ùôóùô°ùôûùôòùôñùôôùô§: ${convertTimeToSpanish(video.publicado)}\n`;
        messageText += `> üîó ùôêùôßùô°: ${video.url}\n\n`;
        messageText += `‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ä∞ üíô ùôÇùô™ùôßùôñ ùôéùôùùôñùôñ~ ‚ä±‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ`;

        await conn.sendMessage(m.chat, {
            image: thumbnail,
            caption: messageText,
            footer: `üåäüíô ùôÇùôêùôçùòº-ùôêùôáùôèùôçùòº-ùôàùòø ü¶à‚ú®`,
            contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: true
            },
            buttons: [
                {
                    buttonId: `${usedPrefix}ytmp3 ${video.url}`,
                    buttonText: { displayText: 'üíô ùóîùòÇùó±ùó∂ùóº üé∂' },
                    type: 1,
                },
                {
                    buttonId: `${usedPrefix}ytmp4 ${video.url}`,
                    buttonText: { displayText: 'üåä ùó©ùó∂ùó±ùó≤ùóº üé¨' },
                    type: 1,
                }
            ],
            headerType: 1,
            viewOnce: true
        }, { quoted: m });

        await m.react('‚úÖ');
    } catch (e) {
        console.error(e);
        await m.react('‚ùå');
        conn.reply(m.chat, 'üíîüêü *Error al buscar el video, Gura se confundi√≥...*', m);
    }
};

handler.help = ['play','play2'];
handler.tags = ['downloader'];
handler.command = ['play','play2'];
export default handler;

async function searchVideos(query) {
    try {
        const res = await yts(query);
        return res.videos.slice(0, 10).map(video => ({
            titulo: video.title,
            url: video.url,
            miniatura: video.thumbnail,
            canal: video.author.name,
            publicado: video.timestamp || 'No disponible',
            vistas: video.views || 'No disponible',
            duracion: video.duration.timestamp || 'No disponible'
        }));
    } catch (error) {
        console.error('üêü Error en yt-search:', error.message);
        return [];
    }
}

function convertTimeToSpanish(timeText) {
    return timeText
        .replace(/year/, 'a√±o').replace(/years/, 'a√±os')
        .replace(/month/, 'mes').replace(/months/, 'meses')
        .replace(/day/, 'd√≠a').replace(/days/, 'd√≠as')
        .replace(/hour/, 'hora').replace(/hours/, 'horas')
        .replace(/minute/, 'minuto').replace(/minutes/, 'minutos');
}
