// üåäü¶à Sistema Diario Oce√°nico de Gawr Gura ü¶àüåä
const cooldown = 12 * 60 * 60 * 1000 // ‚è≥ 12 horas

var handler = async (m, { conn, isPrems }) => {
  const user = global.db.data.users[m.sender]
  const now = Date.now()

  // ‚è≥ Verificaci√≥n de cooldown
  if (user.lastclaim && now - user.lastclaim < cooldown) {
    const timeLeft = msToTime(cooldown - (now - user.lastclaim))
    return conn.reply(m.chat, `üåä *Banco Marino de Gura bloqueado*\n\nü¶à Vuelve en: *${timeLeft}*`, m)
  }

  // üêü Recompensas aleatorias
  const dragones = pickRandom([500, 700, 1000, 1500, 2000, 3000, 5000]) 
  const exp = isPrems
    ? pickRandom([1500, 2000, 2500, 3000, 4000])
    : pickRandom([700, 900, 1200, 1500, 1800])
  const diamonds = pickRandom([1, 2, 3, 4, 5])

  // üíæ Guardar en el perfil
  user.dragones = (user.dragones || 0) + dragones
  user.exp = (user.exp || 0) + exp
  user.diamond = (user.diamond || 0) + diamonds
  user.lastclaim = now

  // üìú Mensaje decorado
  return conn.reply(m.chat, `
‚ï≠‚îÅ‚îÅ‚îÅ„Äî ü¶àüíô ùôçùôÄùòæùôäùôàùôãùôÄùôâùôéùòº ùôÇùôêùôçùòº „Äï‚îÅ‚îÅ‚îÅ‚ïÆ
üåä ·¥ús·¥ú·¥Ä Ä…™·¥è: *@${m.sender.split("@")[0]}*
‚ú® ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç: *${isPrems ? '‚úÖ S√≠, Tiburoncito VIP' : '‚ùå No, Nadador B√°sico'}*
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

üêü ·¥Ö Ä·¥Ä…¢·¥è…¥·¥ás (·¥ç·¥è…¥·¥á·¥Ö·¥Äs): *+${dragones}*
üíé ·¥Ö…™·¥Ä·¥ç·¥Ä…¥·¥õ·¥ás: *+${diamonds}*
üìò ·¥áx·¥ò ·¥Ö·¥á …¢·¥ú Ä·¥Ä: *+${exp}*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üïê Pr√≥xima inmersi√≥n en 12 horas.
üíô ùôÇùôñùô¨ùôß ùôÇùô™ùôßùôñ ùô•ùôßùô§ùô©ùôöùôúùôö ùô©ùô™ ùô§ùôò√©ùôñùô£ùô§ üåä
`, m, { mentions: [m.sender] })
}

handler.help = ['daily', 'claim']
handler.tags = ['rpg']
handler.command = ['daily', 'claim']

export default handler

// üé≤ Funci√≥n de aleatoriedad marina
function pickRandom(list) {
  return list[Math.floor(Math.random() * list.length)]
}

// ‚è≥ Conversor de tiempo a formato bonito
function msToTime(duration) {
  const hours = Math.floor(duration / 3600000)
  const minutes = Math.floor((duration % 3600000) / 60000)
  const seconds = Math.floor((duration % 60000) / 1000)
  return `${hours}h ${minutes}m ${seconds}s`
}
